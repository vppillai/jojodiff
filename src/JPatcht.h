/*
 * JPatcht.h
 *
 * Copyright (C) 2002-2020 Joris Heirbaut
 *
 * This file is part of JojoDiff.
 *
 * JojoDiff is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef JPATCHT_H
#define JPATCHT_H

#include "JFile.h"
#include "JFileOut.h"

namespace JojoDiff {

/**
* @brief Apply patch file generated by jdiff to a source file.
*
*/
class JPatcht
{
    public:
        /**
        * @brief    Create JPatcht object
        *
        * @param    apFilOrg    Source file
        * @param    apFilPch    Patch  file
        * @param    apFilOut    Output file
        * @param    aiVerbse    Verbosity level 0, 1 or 2
        */
        JPatcht(JFile &apFilOrg, JFile &apFilPch, JFileOut &apFilOut,
                const int aiVerbse=0);

        /** Default destructor */
        virtual ~JPatcht();

        /**
        * @brief JPatch function
        *
        * Input stream consists of a series of
        *   <op> (<data> || <len>)
        * where
        *   <op>   = <ESC> (<MOD>||<INS>||<DEL>||<EQL>)
        *   <data> = <chr>||<ESC><ESC>
        *   <chr>  = any byte different from <ESC><MOD><INS><DEL> or <EQL>
        *   <ESC><ESC> yields one <ESC> byte
        *
        * @param    apFilOrg    Source file
        * @param    apFilPch    Patch  file
        * @param    apFilOut    Output file
        * @return 1             ok
        * @return EXI_SEK       Error seeking file
        * @return EXI_LRG       Error on 64-bit number
        * @return EXI_RED       Error reading file
        * @return EXI_WRI       Error writing file
        * @return EXI_MEM       Error allocating memory
        * @return EXI_ERR       Spurious error occured
        */
        int jpatch ( ) ;

    protected:

    private:
        JFile       &mpFilOrg;      //!< Source file
        JFile       &mpFilPch;      //!< Patch  file
        JFileOut    &mpFilOut;      //!< Output file
        const int   miVerbse;      //!< Verbosity level

        /** @brief Get an offset from the input file
        *
        * @param  lpFil  input file
        * @return offset
        */
        off_t ufGetInt( JFile &lpFil ) ;

        /** @brief Put one byte of output data
        *
        * @param    azPosOrg    position on source file
        * @param    azPosOut    position on output file
        * @param    aiOpr       MOD or INS
        * @param    aiOut       output byte
        * @param    aiOff       offset
        * @return   1
        */
        int ufPutDta( off_t const azPosOrg, off_t const azPosNew,
                      int liOpr, int const aiDta, off_t aiOff );

        /** @brief Read a data sequence (INS or MOD)
        *
        * @param    azPosOrg    position on source file
        * @param    azPosOut    position on output file
        * @param    aiOpr       INS or MOD
        * @param    azMod       out: offset counter
        * @param    aiPnd       First pending byte (EOF = no pending byte)
        * @param    aiDbl       Second pending byte (EOF = no pending byte)
        */
        int ufGetDta( off_t const azPosOrg, off_t const azPosNew,
                      int const liOpr, off_t &lzMod, int liPnd, int liDbl );

};

} /* namespace */

#endif // JPATCHT_H
